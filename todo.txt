LOT OF STUFF!




if file is empty parsing gets passed


brdf (for what?)
restir (for what?)
compile with --fast-math 
Box-Muller transform to implement a normal distribution (Monte carlo simulation if used)
caustic light!
typedef float   t_vec4 __attribute__ ((vector_size (4 * sizeof(float))))for SIMD

https://www.scratchapixel.com/lessons/3d-basic-rendering/cam-nav-controls/3d-nav-cam-nav-controls.html

https://en.algorithmica.org/hpc/simd/intrinsics/

https://berthub.eu/gcc-simd/fp-simd-builtins.html
https://gcc.gnu.org/onlinedocs/gcc-3.4.0/gcc/X86-Built-in-Functions.html
https://gcc.gnu.org/onlinedocs/gcc/Vector-Extensions.html



 https://www.youtube.com/watch?v=TEjDYtkLRdQ&list=PL_w_qWAQZtAZhtzPI5pkAtcUVgmzdAP8g&index=10
 https://learnopengl.com/Getting-started/Transformations
 https://raytracing.github.io/
 https://github.com/favreau/awesome-ray-tracing
 https://www.cl.cam.ac.uk/teaching/1999/AGraphHCI/SMAG/node2.html
 https://gcc.gnu.org/onlinedocs/gcc/Vector-Extensions.html


For quaternions

 complex float a __attribute__ ((aligned (16))) = 5 + 10*I;
__m128 f = _mm_load_ps((float const *)&a); // requires 16B alignment
float *p = (float *)&f;
printf("real(0): %f, imag(1): %f, (2): %f, (3): %f\n", p[0], p[1], p[2], p[3]);


You need at least these three simple geometric objects: 

cylinder -> missing caps

• If applicable, all possible intersections and the insides of the objects must be handled
correctly.
• Your program must be able to resize the unique properties of objects: diameter for
a sphere and the width and height for a cylinder.
• Your program must be able to apply translation and rotation transformations to
objects, lights, and cameras (except for spheres and lights that cannot be rotated).
• Light management: spot brightness, hard shadows, ambient lighting (objects are
never completely in the dark). You must implement ambient and diffuse lighting.
• The program displays the image in a window and respects the following rules:
◦ Pressing ESC must close the window and quit the program cleanly.
◦ Clicking on the red cross on the window frame must close the window and quit
the program cleanly.
◦ The use of images from the minilibX library is strongly recommended.
• Your program must take as its first argument a scene description file with the .rt
extension.
◦ Each type of element can be separated by one or more line breaks.
◦ Each type of information from an element can be separated by one or more
spaces.
◦ Each type of element can be set in any order in the file.
◦ Elements defined by a capital letter can only be declared once in the scene




Phong lightning possible implementation, to adjust when the structure of the project is clear

t_color   phong_lightning(const t_object *obj, const t_light* light, 
                            const t_ray* eye_ray, const t_vec4* normal)
{
    t_color     result[4]; /* The different compontents of the phong lighting -> [EFFECTIVE, AMBIENT, DIFFUSE, SPECULAR]*/
    float       values[3]; /*[LIGHT - NORMAL DOT PRODUCT,
                            REFLECTED RAY - DIRECTION DOT PRODUCT, PHONG FACTOR]*/
    t_vec4      reflected_ray;
    t_vec4      light_vector;
    
    result[EFFECTIVE] = obj->color * light->brightness;
    light_vector = vector_normalize(light->pos - eye_ray->origin);
    result[AMBIENT] = obj->material.elem.ambient * result[EFFECTIVE];
    values[0] = vector_dot_product(light_vector, *normal);
    if (values[0] < 0)
        return (result[AMBIENT]);
    result[DIFFUSE] = result[EFFECTIVE] * obj->material.elem.diffuse * values[0];
    reflected_ray = vector_reflect(-light_vector, *normal);
    values[1] = vector_dot_product(reflected_ray, eye_ray->direction);
    if (values[1] <= 0)
        return (result[AMBIENT] + result[DIFFUSE]);
    values[2] = powf(values[1], obj->material.elem.shininess);
    result[SPECULAR] = vector_from_float(light->brightness *
                             obj->material.elem.specular * values[2]);
    return (result[AMBIENT] + result[DIFFUSE] + result[SPECULAR]);
}

Idea for draw routine

/* void    draw_routine(t_image *img)
{
    static float    half = WALL_SIZE * 0.5;
    static float    pixel_size = (float)WALL_SIZE / WIDTH;
    t_ray           eye_ray;
    t_ray           ray;
    t_color         color;
    t_da            intrs;
    float           intersections[2];
    float           world_y;
    float           world_x;
    float           t;
    

    t_light l = {.pos = {-10, 10, -10, 1}, .color = {1, 1, 1, 0}};
    t_object sp = sphere_new((t_vec4){0, 0, 0, 1}, (t_color){10, 10, 10, 0}, 1);
    sp.transform = matrix4_identity();
    sp.material = material_set(0.1, 0.9, 0.9, 200);
    sp.color = (t_color){1, 0.2, 1, 0};

    da_init(&intrs, 10, INTERSECT_BYTES);
    ray.origin = (t_vec4){0,0,-5,1};
    for (int y = 0; y < HEIGHT; y ++)
    {
        world_y = half - pixel_size * y;   
        for (int x = 0; x <  WIDTH; x++)
        {
            world_x = - half + pixel_size * x;
            ray.direction = (t_vec4){world_x, world_y, 10, 1} - ray.origin;
            ray.direction = vector_normalize(ray.direction);
            if (sphere_hit_test(&ray, &sp, &intrs, intersections))
            {
                t = fmin(intersections[0], intersections[1]);
                if (t >= 0)
                {
                    t_point4    p = ray_at(ray, t);
                    t_vec4      normal = sphere_normal_at(&sp, &p);
                    eye_ray.origin = p;
                    eye_ray.direction = -ray.direction;
                    color = phong_lightning(&sp, &l, &eye_ray, &normal);
                    color = (t_vec4){clamp(color[0], 0, 1), clamp(color[1], 0, 1), clamp(color[2], 0, 1), 0};
                    image_pixel_put(img, x, y, convert_to_rgb(&color));
                }
            }
        }
    }  
} */