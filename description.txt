
GENERAL IDEAS

-   Keep track of pixel being rendered -> for debugging purpose save the x and y in a global var that you can print to check where it fails

- DESIGN EVERYTHING AS GENERAL AS POSSIBLE 
        -> for example object struct is general and has its own hit function that will be called
        -> 

- I tried to use the stack as much as possible and minimize the call to malloc to have better perfomance and to avoid having to check a lot if malloc failed

- When possible I tried to use arrays instead of linked list, in particular this can be helpful in the main loop where we have to traverse all the objects in the 
    world, having a contiguous block of memory where they are all stored helps with cache hits (I found this video on the topic that was quite helpful to understand the concept : https://www.youtube.com/watch?v=xFMXIgvlgcY)

    For this reason there is a dynamic arrays implemented in the minift library. It's quite rudimental but gets the work done (if it doesn't let me know!)
    This is the struct definition
    typedef struct s_da
    {
        char*       data; -> The actual block of memory where the data is stored
        t_bytes     bytes; -> The actual bytes in memory that the element occupies
        size_t      size; -> The amount of elements present in the array
        size_t      capacity; -> The amount of elements the array can store before going out of space
    }   t_da;

    The data is stored as a char* but it can be also be done as void* to be honest. And it points to a contiguous block of memory where we store everything we need. 
    All the functions related to the dynamic array are in the ft_da.c file
    Another advantage is that to free the memory allocated we can just call once free(da.data) and that's it

- Use SIMD instructions when possible

    Vectors are defined using the __m128 special type, this type is specific for the Intel CPUs and is using the XMM registers, which are basically a set of registers that can hold up to 4 different floating point numbers
    at the same time. For our program this means that we can threat vectors as normal types like int and float, this is particularly useful when doing operations on them because for example if we need to add 1 to a vector we can 
    simply do vector + 1 and the cpu will add 1 to all the 4 different components of the vector instead of adding 1 to the single elements one by one (1 operation instead of 4, great!)
    There is this article of wikipedia that talks more about it -> https://en.wikipedia.org/wiki/Advanced_Vector_Extensions

    To operate with vectors we need to use the avx intrisics, the one we are using are :
    -> _mm_dp_ps :  does the dot product of two vectors 
    -> _mm_cvtss_f32 : takes the vector passed as parameter and returns the first element of it
    -> _mm_add_ps : adds two vectors together
    -> _mm_set1_ps : sets all the elements in the vector to the number passed as parameter


    Matrices are declared in this way :
    typedef union u_mat4
        {
            t_vec4  row[4];
            float   m[4][4];
        } t_mat4;
    So they are basically an array of 4 vectors [vector1, vector2, vector3, vector4] where we are storing all the elements of the matrix.
    They are declared as a union because doing this way we can access for example element in position (1, 2) by doing m[1][2]. If it wasn't declared this way to access element in position (1,2) we need to do m.row[1][2] ,doesn't change too much 
    but it makes the code more readable.


- Rays are declared as a struct

typedef struct s_ray
{
    t_rtype         type;       -> The ray will be of a different type depending on what is coming from (see ray.h for more infos)
    t_vec4          direction;  -> Where the ray is heading to
    t_point4        origin;     -> Where the ray is coming from (rays that we are shooting from the camera will have origin = camera.origin);
} t_ray;


- The world is also declared as a struct 

typedef struct s_world
{
    t_ambient_light a_light;    -> basically this is the color of the background
    t_light         light_src;  -> The source of light (I started with a single source since multiple lights are part of the bonus, in case we want to do it we might need to make this a dynamic array or a linked list)
    t_cam           cam;        -> Camera struct, to be implemented yet
    t_da            objects;    ->  The dynamic array of the objects in the scene, we are going to use this one to check if a ray interesects any of them
} t_world;
